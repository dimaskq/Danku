import GradeTestContainer from "@/components/Tests/GradeTestContainer";
import ErrorMessage from "@/components/Tests/ErrorMessage";
import EmptyTestsMessage from "@/components/Tests/EmptyTestsMessage";

interface Test {
  _id: string;
  text: string;
  class: number;
  topic: string;
  answers: { text: string; isCorrect: boolean }[];
}

interface Props {
  params: Promise<{ grade: string }>;
}

export async function generateStaticParams() {
  return Array.from({ length: 11 }, (_, i) => ({
    grade: String(i + 1),
  }));
}

export default async function GradeTestPage({ params }: Props) {
  try {
    const { grade } = await params;
    const gradeNumber = parseInt(grade, 10);

    console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –∫–ª–∞—Å—É ${gradeNumber}`);

    if (isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 11) {
      console.error(`‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–ª–∞—Å: ${grade}`);
      return (
        <ErrorMessage title="–ü–æ–º–∏–ª–∫–∞" message={`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–ª–∞—Å: ${grade}`} />
      );
    }

    const res = await fetch(
      `http://localhost:3000/api/questions?class=${gradeNumber}`,
      {
        cache: "no-store",
      }
    );

    if (!res.ok) {
      const errorText = await res.text();
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ API: ${errorText}`);
      return (
        <ErrorMessage
          title={`–¢–µ—Å—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É`}
          message={`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤: ${res.status} ${res.statusText}`}
        />
      );
    }

    const tests: Test[] = await res.json();

    if (tests.length === 0) {
      return (
        <EmptyTestsMessage
          title={`–¢–µ—Å—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É`}
          message={`–¢–µ—Å—Ç–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.`}
        />
      );
    }

    return <GradeTestContainer grade={grade} />;
  } catch (error: any) {
    console.error(`‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`, error.stack);
    return (
      <ErrorMessage
        title="–ü–æ–º–∏–ª–∫–∞"
        message={`–°—Ç–∞–ª–∞—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`}
      />
    );
  }
}
