import GradeTestContainer from "@/components/Tests/GradeTestContainer";
import ErrorMessage from "@/components/Tests/ErrorMessage";
import EmptyTestsMessage from "@/components/Tests/EmptyTestsMessage";
import { Test } from "@/types/test";

interface Props {
  params: Promise<{ grade: string }>;
}

const validMathGrades = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "11",
];

const baseUrl = process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000";

export async function generateStaticParams() {
  return validMathGrades.map((grade) => ({ grade }));
}

export default async function MathTestPage({ params }: Props) {
  try {
    const { grade } = await params;

    console.log(`MathTestPage accessed with grade: ${grade}`);

    if (!validMathGrades.includes(grade)) {
      return (
        <ErrorMessage title="–ü–æ–º–∏–ª–∫–∞" message={`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–ª–∞—Å: ${grade}`} />
      );
    }

    console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –∫–ª–∞—Å—É ${grade}`);

    const res = await fetch(`${baseUrl}/api/questions?class=${grade}`, {
      cache: "no-store",
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ API: ${errorText}`);
      return (
        <ErrorMessage
          title={`–¢–µ—Å—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É`}
          message={`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤: ${res.status} ${res.statusText}`}
        />
      );
    }

    const tests: Test[] = await res.json();
    console.log(`–¢–µ—Å—Ç–∏ –¥–ª—è class=${grade}:`, tests);

    if (tests.length === 0) {
      return (
        <EmptyTestsMessage
          title={`–¢–µ—Å—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É`}
          message={`–¢–µ—Å—Ç–∏ –¥–ª—è ${grade} –∫–ª–∞—Å—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.`}
        />
      );
    }

    return <GradeTestContainer grade={grade} />;
  } catch (error: any) {
    console.error(`‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`, error.stack);
    return (
      <ErrorMessage
        title="–ü–æ–º–∏–ª–∫–∞"
        message={`–°—Ç–∞–ª–∞—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`}
      />
    );
  }
}
